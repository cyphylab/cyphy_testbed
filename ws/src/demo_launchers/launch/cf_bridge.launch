<?xml version="1.0"?>
<launch>
    <arg name="uri" default="radio://0/100/2M/E7E7E7E7E7" />
    <arg name="frame" default="cf2" />
    <arg name="server" default="RS1" />
    
    <group ns="$(arg frame)">

        <node pkg="crazyflie_driver"
            type="crazyflie_add"
            name="crazyflie_add"
            output="screen">
            <param name="uri" value="$(arg uri)" />
            <param name="tf_prefix" value="$(arg frame)" />
            <param name="server" value="$(arg server)" />
            <param name="enable_logging" value="True" />
            <param name="enable_logging_imu" value="False" />
            <param name="enable_logging_temperature" value="False" />
            <param name="enable_logging_magnetic_field" value="False" />
            <param name="enable_logging_pressure" value="False" />
            <param name="enable_logging_battery" value="False" />
            <param name="enable_logging_packets" value="False" />
            <param name="enable_logging_pose" value="False" /> 
            <rosparam>
                genericLogTopics: ["logEstAttRPY", "logMotors"]
                genericLogTopicFrequencies: [100, 100]
                genericLogTopic_logEstAttRPY_Variables: ["stateEstimate.roll", "stateEstimate.pitch", "stateEstimate.yaw"]
                genericLogTopic_logMotors_Variables: ["motor.m1", "motor.m2", "motor.m3", "motor.m4"]
            </rosparam>
        </node>

<!--
Set up the vehicle, selecting the Commander Level, Estimation Algorithm and 
Control Algorithm
com_lev = {0 "low level" | 1 "high level"}
Estimator = {CMP | EKF | USC}
Controller = { PID | Mellinger }
stabMode = {1 "angle" | 0 "rates"}
-->
<node name="setup_vehicle" pkg="crazyflie_demo" type="setup_vehicle.py" output="screen">
    <param name="cf" value="$(arg frame)" />
    <param name="comm_lev" value='1' type='int' />
    <param name="Estimator" value="EKF" type='str' />
    <param name="ResEstimator" value='true' type='bool' />
    <param name="Controller" value="Mellinger" type='str' />
    <param name="stabMode" value="1" type='int' />
</node>



<!--
========================================================================
These nodes are passive, they listen to topics and they publish on 
odometry topics, which can be represented in rviz, or in other 
visualization tool

Publish the Estimated odometry 
<node name="Est_Odometry" pkg="crazyflie_demo" type="publish_kalman_odometry.py" output="screen"> 
</node>
-->

</group>


<!--
========================================================================
Monitoring
<node pkg="rqt_plot"
    type="rqt_plot" 
    name="RealTime_Monitor" args="/$(arg vehicle_frame)/logMotors"/>

-->

<!--
============================================================================
Bag recording 

- /$(arg vehicle_frame)/pose: This is x,y,z,quat from the internal estimator 
- /$(arg vehicle_frame)/logAttRPY: This is the human readable attitude information
- /vrpn_client_node/$(arg vehicle_frame)/pose: This is the ground truth
- /ghost_trajectory: This is the requested trajectory pose (simulated)
-->

<node pkg="rosbag" name="record_cf" type="record" args="-O /tmp/$(arg frame)_crazyflie /$(arg frame)/pose /$(arg frame)/logEstAttRPY /$(arg frame)/rssi"/>

</launch>
