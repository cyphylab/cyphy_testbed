<?xml version="1.0"?>
<launch>
	<arg name="tg_frame" default="cf1" /> <!-- Identify the frame to be controlled (Currently not used)--> 
	<arg name="commander_id" default="cm1" />  <!-- Useful to identify the source of the commands (Currently not used) -->
<!-- 
    This launcher sets up the nodes to send commands to the vehicle.
-->

    <!--
    ============================================================================
    Trajectory Generation Service
    -->
    <node name="Guidance_Node" pkg="command_interface" type="guidance.py" output="screen"> 
	    <param name="target_frame" value="$(arg tg_frame)" type='str' />
        <param name="target_odometry_topic" value="/cf1/external_odom" type='str' />
    </node>

		<!--
    ============================================================================
    Contoller Node
    -->
		<include file="$(find demo_launchers)/launch/ext_control.launch">
			<arg name="setpoint_topic" value="/setpoint" />
		</include>


	<!-- 
	===========================================================================
	Run the node publishing the setpoint value as odometry message which can be visualized in
	rviz
	-->
	<node name="ctrlsetpoint_odometry_pub" pkg='monitors' type="ctrl_setpoint_odometry_publisher" output="screen">
            <param name="out_ghost_topic" value="cf1/ghost_odom" type="str" />
            <param name="controlsetpoint_topic" value="cf1/setpoint" type="str" />
		<param name="tg_frame_id" value="$(arg tg_frame)" type='str' />
	</node>	

<!--
============================================================================
Bag recording 

- /setpoint: Trajectory setpoint for the crazyflie 
-->
<node pkg="rosbag" name="record" type="record" args="-O /tmp/$(arg commander_id)_$(arg tg_frame)_cmd $(arg tg_frame)/setpoint"/>
</launch>
